<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://rulemaker-blog.netlify.app/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rulemaker-blog.netlify.app/" rel="alternate" type="text/html" /><updated>2021-03-01T22:40:57+09:00</updated><id>https://rulemaker-blog.netlify.app/feed.xml</id><title type="html">my blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">파이썬과 장고로 프로젝트 시작하기</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/.html" rel="alternate" type="text/html" title="파이썬과 장고로 프로젝트 시작하기" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/.html">&lt;ol&gt;
  &lt;li&gt;source /가상환경모아둔경로/activate 로 가상환경(virtualenv) 활성화&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ex) source /Users/user/Downloads/venvs/myvenv/bin/activate&lt;/p&gt;

&lt;p&gt;이렇게 가상환경을 활성화하면 터미널 라인 맨 앞에 (가상환경명) ex) (myvenv) 이 뜨고 가상환경에서 작업중임을 확인할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(myvenv) ~$ django-admin startproject mysite .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;명령어를 실행해 첫 번째 장고 프로젝트를 시작한다. 명령어를 실행하고 나면 장고 프로젝트를 위한 디렉토리와 파일들이 생성된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;settings.py를 열어 설정을 아래와 같이 변경한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) TIME_ZONE 변경&lt;/p&gt;

&lt;p&gt;TIME_ZONE = ‘Asia/Seoul’&lt;/p&gt;

&lt;p&gt;2) css 파일 같은 정적 파일을 관리할 경로 추가&lt;/p&gt;

&lt;p&gt;STATIC_URL = ‘/static/’&lt;/p&gt;

&lt;p&gt;STATIC_ROOT = os.path.join(BASE_DIR, ‘static’)&lt;/p&gt;

&lt;p&gt;static파일 적용이 안되는 경우 아래와 같이 정적 파일 경로를 설정한다.&lt;/p&gt;

&lt;p&gt;STATIC_ROOT = ‘’&lt;/p&gt;

&lt;p&gt;STATIC_URL = ‘/static/’&lt;/p&gt;

&lt;p&gt;STATICFILES_DIRS = ( os.path.join(‘static’), )&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(myvenv) ~$ python manage.py migrate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;데이터베이스 생성을 위해 명령어를 실행한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(myvenv) ~$ python manage.py runserver&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;명령어를 실행해 웹 서버를 시작한다. 웹 사이트가 잘 작동하는지 확인하기 위해&lt;/p&gt;

&lt;p&gt;http://127.0.0.1:8000/ 에 접속한다. 웹 서버를 중지하려면 Control+C 를 누르면 된다.&lt;/p&gt;</content><author><name></name></author><summary type="html">source /가상환경모아둔경로/activate 로 가상환경(virtualenv) 활성화</summary></entry><entry><title type="html">ACEPTAMOS EOS</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/aceptamos-eos.html" rel="alternate" type="text/html" title="ACEPTAMOS EOS" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/aceptamos-eos</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/aceptamos-eos.html">&lt;p&gt;‘이오스 받아요(ACEPTAMOS EOS)’&lt;/p&gt;

&lt;p&gt;국가 통제 상황을 벗어나 일년에 수백 퍼센트(%) 이상 물가 상승이 일어나는 경우를 하이퍼인플레이션이라고 한다. 베네수엘라는 2015년 이후 유가 폭락과 정부 부패로 국가 법정 화폐인 볼리바의 가치가 급락하면서 하이퍼인플레이션을 맞이한다.&lt;/p&gt;

&lt;p&gt;언젠가 봤던 kbs의 다큐멘터리에서 빵 하나를 사기 위해 돈을 자루에 담아 수레에 싣고 가던 베네수엘라 사람들의 모습이 스쳐간다. 미국 1달러를 구매하기 위해 필요한 볼리마 금액이 2018년 기준 약 100볼리바였던 것에 비해 2019년 이후에는 1600 볼리바 이상으로 폭등했다. 베네수엘라 부유층은 달러를 구입해 화폐로 사용 및 소유하고 있고, 일반 서민층 및 대다수 사람들은 자국 화폐인 볼리바의 대체 화폐로 이오스와 같은 암호 화폐를 일상에서 사용중이다. 최근 비트코인의 변동성이 극대화되면서 하루 등락폭이 요즘과 같이 커지기 전까지 이오스는 가격 변동성이 비교적 크지 않은 스테이블(stable)한 코인에 속하긴 했다. 거래소 간 환전 목적의 화폐로 주로 사용되기도 했으니 말이다.&lt;br /&gt;
택시, 상점 등에 ‘이오스 받아요(aceptamos eos)’ 와 같은 표식이 버젓이 붙은 걸 보면 거짓말만은 전혀 아닌 것 같다.  베네수엘라처럼 하이퍼인플레이션에 따라 법정 통화 가치가 급락하는 경우가 더 많아지면 암호화폐가 기존 자국 화폐를 대체하는 상황이 늘어날 것으로 보인다. 특히 경제 상황이 좋지 않은 베네수엘라 근처 다른 중남미 국가들을 중심으로 이와 같은 현상이 확산할 수 있다. 중남미 국가 중 브라질에 이어 경제 대국 2위에 해당하는 멕시코의 법정 화폐인 페소(peso) 가치 역시 2017년 1원에 60페소 정도였으나 지금 10% 정도 하락한 54페소를 기록하고 있다. 코로나 여파로 인한 경기 부양을 위해 완화된 통화정책이 일년 넘게 지속되고 있는 지금, 떨어지는 화폐 가치에 대한 경계의 필요성을 베네수엘라의 이오스 사용 사례가 잘 보여주는 것 같다.&lt;/p&gt;</content><author><name></name></author><summary type="html">‘이오스 받아요(ACEPTAMOS EOS)’</summary></entry><entry><title type="html">[bootstrap]부트스트랩 활용해 쉽게 디자인하기</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/bootstrap.html" rel="alternate" type="text/html" title="[bootstrap]부트스트랩 활용해 쉽게 디자인하기" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/bootstrap</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/bootstrap.html">&lt;p&gt;Build fast, responsive sites with Bootstrap
Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.&lt;/p&gt;

&lt;p&gt;getbootstrap.com/&lt;/p&gt;

&lt;p&gt;Bootstrap&lt;/p&gt;

&lt;p&gt;The most popular HTML, CSS, and JS library in the world.&lt;/p&gt;

&lt;p&gt;getbootstrap.com
부트스트랩은 빠른 프론트를 만들기 위한 오픈소스다. 직접 반응형 프론트엔드를 만드는 것도 좋지만 빠른 시작을 위해 오픈 소스로 부트스트랩을 이용하는 것도 매우 유용하다. 현재는 v5.0.0-beta2 버전이 릴리즈된 상태이다. 홈페이지로 들어가서 get started로 들어가면 quick start를 위한 안내글이 나와있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;먼저 css 를 로드하기 위한 링크를 html &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; 안에 넣어준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl&quot; crossorigin=&quot;anonymous&quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;js script 번들을 &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; 태그 안에 넣어준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;공식 홈페이지(getbootstrap.com/docs/5.0/getting-started/introduction/)에서 제공하는 스타터 탬플릿(starter tamplate)은 아래와 같다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;!doctype html&amp;gt;&lt;/p&gt;

&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;

&lt;!-- Required meta tags --&gt;

&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;

&lt;!-- Bootstrap CSS --&gt;

&lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl&quot; crossorigin=&quot;anonymous&quot; /&gt;

&lt;title&gt;Hello, world!&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;Hello, world!&lt;/h1&gt;

&lt;!-- Optional JavaScript; choose one of the two! --&gt;

&lt;!-- Option 1: Bootstrap Bundle with Popper --&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;!-- Option 2: Separate Popper and Bootstrap JS --&gt; &lt;!-- --&gt;

&lt;/body&gt;

&lt;/html&gt;</content><author><name></name></author><summary type="html">Build fast, responsive sites with Bootstrap Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.</summary></entry><entry><title type="html">Don’t learn machine learning</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/dont-learn-machine-learning.html" rel="alternate" type="text/html" title="Don’t learn machine learning" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/dont-learn-machine-learning</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/dont-learn-machine-learning.html">&lt;p&gt;Disclaimer: The following is based on my observations of machine learning teams — not an academic survey of the industry. For context, I’m a contributor to Cortex, an open source platform for deploying models in production.
If you’re a developer, you probably have at least a passing interest in machine learning. The concept of algorithms that can teach themselves to make predictions is just kind of… cool.
However, if you do decide to study ML and follow the canonical recommendations for getting started, there’s a decent chance you’ll spend two weeks learning linear algebra and multivariable calculus before giving up.
The reason for this is that most introductory material for machine learning isn’t geared towards developers, it’s geared to ML researchers—and this is an issue for developers who just want to build products with machine learning.
Do you want to build products, or do research?
Prior to the late 2000s, machine learning was more or less exclusively a research problem. There simply weren’t many companies using machine learning in production in a meaningful way.
As such, a lot of the introductory material available for machine learning approaches it from this research perspective. It begins by explaining neural networks from a mathematical perspective, explaining all of the theory behind ML, things like back propagation and adversarial networks.
Even non-university affiliated material follows this pattern to some extent. For example, this is taken directly from TensorFlow’s “Quickstart for Beginners”:
If you think I’m cherrypicking confusing language, I invite you to read the whole thing.
If you’re already familiar with the math behind machine learning, or you’re excited about learning it, this approach will work for you. If, however, you primarily want to build things with machine learning, this may not be exactly what you’re looking for.
To use programming as a corollary, this approach is like learning to write code by first learning assembly. Virtually no developer learns like this.
Note: If you somehow did learn to code in assembly, I accept your angry comments, and am impressed that you got a browser to install on whatever obscure Linux distro you’re running.
When you learned to code, you likely did so by writing hello world in a high-level language. Then, as you introduced little bits of complexity to your projects, you learned more and more lower-level programming as needed.
This learning pattern is successful among people who build software because it prioritizes building things—and if you’re more interested in building a recommendation engine than publishing a paper, this is how you should approach learning ML.
How to learn ML by building software
If you’re the type of person who learns best by taking courses, the best resource, and probably the most vocal advocate for this top-down, learn-by-doing approach to ML, is fastai’s Practical Deep Learning For Coders course.
This article’s goal isn’t to be a giant advert for fastai, but suffice to say, its founders (Jeremy Howard and Rachel Thomas) have put together several courses that teach developers deep learning by having them actually build things, diving into the underlying theory as it pertains to the projects being built. To get a sense for their teaching style, check out this talk from Rachel Thomas:
Alternatively, if you’re the sort of person who learns best by diving in and building things on your own, getting started with machine learning is the same as any other niche of programming. Pick a project that sounds interesting to you—I’ve put together a giant list of beginner-friendly NLP projects here—and jump in.
A good approach for getting familiar with what it’s like to build with ML, assuming you learn this way, would be to:
Identify a goal, like building a text auto-completer or a license plate identifier.
Find a pre-trained model that fits your project—GPT-2 or YOLOv3 would work for the previously mentioned projects, respectively.
If you’re feeling fancy, you can even use a library like gpt-2-simple to fine tune (customize to your own data) your model.
Finally, deploy your model as a microservice.
Once you have a model deployed as an API, you can query it like you would any other web service and build your application around it.
You can actually see a real world application of this process in this project, created by a solo engineer dabbling in ML:
With this approach, you can learn about the different popular model architectures and approaches to machine learning, and what applications they’re suited for. Just as importantly, you’ll learn about ML infrastructure, which is vital to building real products out of models.
Once you can build with machine learning, then learn the theory
If you’re an engineer, you’ve probably implemented some form of authentication before, which means you’ve (hopefully) hashed passwords.
When you set up your password hashing, did you write a custom hashing algorithm? Did you spend weeks studying cryptography? Or did you just use bcrypt?
Similarly, when you built your first web application, did you spend weeks learning about databases? Did you write your own from scratch? Or did you use whatever ORM came with your favorite framework?
This same logic applies to machine learning as well. If you’re the sort of person who likes to build software, start by building software with machine learning, and let tools, pre-trained models, and ML frameworks abstract away the underlying ML theory. Then, if you’re curious or if your project demands more complexity, dig deeper under the hood to see how it all works.
Caleb Kaiser
ML infrastructure (https://github.com/cortexlabs/cortex) Formerly at AngelList. Originally a Cadillac.&lt;/p&gt;

&lt;p&gt;Follow
5.9K&lt;/p&gt;

&lt;p&gt;24&lt;/p&gt;</content><author><name></name></author><summary type="html">Disclaimer: The following is based on my observations of machine learning teams — not an academic survey of the industry. For context, I’m a contributor to Cortex, an open source platform for deploying models in production. If you’re a developer, you probably have at least a passing interest in machine learning. The concept of algorithms that can teach themselves to make predictions is just kind of… cool. However, if you do decide to study ML and follow the canonical recommendations for getting started, there’s a decent chance you’ll spend two weeks learning linear algebra and multivariable calculus before giving up. The reason for this is that most introductory material for machine learning isn’t geared towards developers, it’s geared to ML researchers—and this is an issue for developers who just want to build products with machine learning. Do you want to build products, or do research? Prior to the late 2000s, machine learning was more or less exclusively a research problem. There simply weren’t many companies using machine learning in production in a meaningful way. As such, a lot of the introductory material available for machine learning approaches it from this research perspective. It begins by explaining neural networks from a mathematical perspective, explaining all of the theory behind ML, things like back propagation and adversarial networks. Even non-university affiliated material follows this pattern to some extent. For example, this is taken directly from TensorFlow’s “Quickstart for Beginners”: If you think I’m cherrypicking confusing language, I invite you to read the whole thing. If you’re already familiar with the math behind machine learning, or you’re excited about learning it, this approach will work for you. If, however, you primarily want to build things with machine learning, this may not be exactly what you’re looking for. To use programming as a corollary, this approach is like learning to write code by first learning assembly. Virtually no developer learns like this. Note: If you somehow did learn to code in assembly, I accept your angry comments, and am impressed that you got a browser to install on whatever obscure Linux distro you’re running. When you learned to code, you likely did so by writing hello world in a high-level language. Then, as you introduced little bits of complexity to your projects, you learned more and more lower-level programming as needed. This learning pattern is successful among people who build software because it prioritizes building things—and if you’re more interested in building a recommendation engine than publishing a paper, this is how you should approach learning ML. How to learn ML by building software If you’re the type of person who learns best by taking courses, the best resource, and probably the most vocal advocate for this top-down, learn-by-doing approach to ML, is fastai’s Practical Deep Learning For Coders course. This article’s goal isn’t to be a giant advert for fastai, but suffice to say, its founders (Jeremy Howard and Rachel Thomas) have put together several courses that teach developers deep learning by having them actually build things, diving into the underlying theory as it pertains to the projects being built. To get a sense for their teaching style, check out this talk from Rachel Thomas: Alternatively, if you’re the sort of person who learns best by diving in and building things on your own, getting started with machine learning is the same as any other niche of programming. Pick a project that sounds interesting to you—I’ve put together a giant list of beginner-friendly NLP projects here—and jump in. A good approach for getting familiar with what it’s like to build with ML, assuming you learn this way, would be to: Identify a goal, like building a text auto-completer or a license plate identifier. Find a pre-trained model that fits your project—GPT-2 or YOLOv3 would work for the previously mentioned projects, respectively. If you’re feeling fancy, you can even use a library like gpt-2-simple to fine tune (customize to your own data) your model. Finally, deploy your model as a microservice. Once you have a model deployed as an API, you can query it like you would any other web service and build your application around it. You can actually see a real world application of this process in this project, created by a solo engineer dabbling in ML: With this approach, you can learn about the different popular model architectures and approaches to machine learning, and what applications they’re suited for. Just as importantly, you’ll learn about ML infrastructure, which is vital to building real products out of models. Once you can build with machine learning, then learn the theory If you’re an engineer, you’ve probably implemented some form of authentication before, which means you’ve (hopefully) hashed passwords. When you set up your password hashing, did you write a custom hashing algorithm? Did you spend weeks studying cryptography? Or did you just use bcrypt? Similarly, when you built your first web application, did you spend weeks learning about databases? Did you write your own from scratch? Or did you use whatever ORM came with your favorite framework? This same logic applies to machine learning as well. If you’re the sort of person who likes to build software, start by building software with machine learning, and let tools, pre-trained models, and ML frameworks abstract away the underlying ML theory. Then, if you’re curious or if your project demands more complexity, dig deeper under the hood to see how it all works. Caleb Kaiser ML infrastructure (https://github.com/cortexlabs/cortex) Formerly at AngelList. Originally a Cadillac.</summary></entry><entry><title type="html">ETC by Donald McIntyre</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/etc-by-donald-mcintyre.html" rel="alternate" type="text/html" title="ETC by Donald McIntyre" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/etc-by-donald-mcintyre</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/etc-by-donald-mcintyre.html">&lt;p&gt;이더리움클래식(ETC) 개발자 “ETC, 10년 내 7천 달러 돌파”&lt;/p&gt;

&lt;p&gt;도널드 맥킨타이어(Donald McIntyre) 이더리움클래식(ETC, 시가총액 38위) 코어 개발자가 공식 채널을 통해 “ETC가 향후 10년 내 7,000달러를 넘어설 것”이라고 전망했다. 이와 관련 그는 7가지 근거를 들었다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;아주 극소수 시스템만이 경쟁력 있는 블록체인 포맷으로 경쟁 中. 이 중 ETH는 PoS으로 전환, ETC 시장 파이 커질 전망&lt;/li&gt;
  &lt;li&gt;나카모토 컨센서스는 가장 안전한 합의 메커니즘&lt;/li&gt;
  &lt;li&gt;ETC는 유일한 PoW 스마트컨트랙트 플랫폼&lt;/li&gt;
  &lt;li&gt;비교적 안전함&lt;/li&gt;
  &lt;li&gt;공급량 제한(2.1억 ETC)&lt;/li&gt;
  &lt;li&gt;기본 레이어 상에서 BTC와 보완적 포지션&lt;/li&gt;
  &lt;li&gt;기본 레이어의 경우 금과 견줄만큼 가치 높음
한편 그는 “기본 레이어 가치가 10년 내 금의 50%까지만 상승해도 BTC는 (시총) 3조 달러, 개당 14.3만달러, ETC는 (시총) 1.5조 달러, 7,100달러가 될 것”이라고 덧붙였다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">이더리움클래식(ETC) 개발자 “ETC, 10년 내 7천 달러 돌파”</summary></entry><entry><title type="html">[python &amp;amp; django] 가상환경 설정하고 장고 설치하기</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/python-django.html" rel="alternate" type="text/html" title="[python &amp;amp; django] 가상환경 설정하고 장고 설치하기" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/python-django</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/python-django.html">&lt;p&gt;가상환경을 설치할 디렉토리로 이동해서 가상환경 설치&lt;/p&gt;

&lt;p&gt;$python3 -m venv vBlog&lt;/p&gt;

&lt;p&gt;만든 가상환경 활성화&lt;/p&gt;

&lt;p&gt;$source /가상환경 디렉토리(해당 폴더 경로 복사하고 붙여넣으면 됨)/bin/activate&lt;/p&gt;

&lt;p&gt;가상환경 안에 장고 설치&lt;/p&gt;

&lt;p&gt;(vBlog) $ pip3 install django&lt;/p&gt;

&lt;p&gt;패키지 설치&lt;/p&gt;

&lt;p&gt;태그 달기 기능에 필요한 패키지 설치&lt;/p&gt;

&lt;p&gt;(vBlog) pip3 install django-taggit&lt;/p&gt;

&lt;p&gt;(vBlog) pip3 install django-taggit-templatetags2&lt;/p&gt;

&lt;p&gt;폼 장식 패키지 설치&lt;/p&gt;

&lt;p&gt;(vBlog) pip3 install django-widget-tweaks&lt;/p&gt;

&lt;p&gt;이미지처리 패키지 설치&lt;/p&gt;

&lt;p&gt;((vBlog) pip3 install django-widget-tweaks&lt;/p&gt;

&lt;p&gt;타임존 관리하는 pytz 패키지 설치&lt;/p&gt;

&lt;p&gt;(vBlog) pip3 install pytz&lt;/p&gt;

&lt;p&gt;패키지 설치 툴 업그레이드&lt;/p&gt;

&lt;p&gt;(vBlog) pip3 install -U pip setuptools wheel&lt;/p&gt;

&lt;p&gt;InsecurePlatformWarning해결하기&lt;/p&gt;

&lt;p&gt;(vBlog) pip3 install pyopenssl ndg-httpsclient pyasn1&lt;/p&gt;

&lt;p&gt;가상환경 비활성화&lt;/p&gt;

&lt;p&gt;$deactivate&lt;/p&gt;</content><author><name></name></author><summary type="html">가상환경을 설치할 디렉토리로 이동해서 가상환경 설치</summary></entry><entry><title type="html">[Teachable Machine] 코딩없이 머신러닝 모델 만들기</title><link href="https://rulemaker-blog.netlify.app/2021/03/01/teachable-machine.html" rel="alternate" type="text/html" title="[Teachable Machine] 코딩없이 머신러닝 모델 만들기" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://rulemaker-blog.netlify.app/2021/03/01/teachable-machine</id><content type="html" xml:base="https://rulemaker-blog.netlify.app/2021/03/01/teachable-machine.html">&lt;p&gt;Teachable Machine
Train a computer to recognize your own images, sounds, &amp;amp; poses.
A fast, easy way to create machine learning models for your sites, apps, and more – no expertise or coding required.&lt;/p&gt;

&lt;p&gt;구글에서 제공하는 Teachable machine을 활용하면 코딩없이 머신러닝 모델을 만들 수 있다. 연예인 사진 데이터를 크롤링해 학습 데이터로 활용하면 동물상테스트나 관상테스트 같은 사이트에 사용된 머신러닝 모델을 만들 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;Teachable machine을 활용해 머신러닝 모델을 만드는 방법은 간단하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;New Project 를 생성한다. 이 때 가장 먼저 Image project인지 Audio project 인지  Pose Project 인지 선택한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Image Project를 선택한 경우 웹캠을 활용하거나 업로드 방식을 통해 직접 모은 사진 데이터를 업로드해 학습 데이터로 활용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스별로 나눈 이미지 데이터를 업로드한 다음 Train model을 눌러 트레이닝한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preview를 통해 원하는 모델이 만들어졌는지 확인한다. 이 때 사람 얼굴을 학습한 사진이면 전신보다는 얼굴에만 포커스된 사진들만 모아 학습 데이터로 활용해야 정확도가 높아진다. preview로 확인한 아웃풋이 만족스럽지 않은 경우 학습 데이터를 다시 모으거나 클리닝해 재학습하는 것이 필요한다. 학습 데이터의 조건이 동일할수록 이를테면 사람 얼굴을 학습하는 경우 얼굴이 확대된 흑백 사진으로 통일한다거나 해야 정확도가 높아진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Export Model을 누르면 만든 머신러닝 모델을 다운로드 할 수 있는 압축파일이 제공된다. 혹은 직접 다운로드하지 않고 웹이나 앱에 붙일 수 있도록 javascript 링크를 복사해도 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;teachablemachine의 활용 방안은 무궁무진하다. 예를 들어 식물이나 동물 사진을 학습한 모델을 만들어 식물 맞추기, 동물 맞추기 같은 교육 웹이나 앱을 만들 수도 있을 것이다. 모델을 만드는데 어떤 코딩도 필요하지 않으니 기존에 머신러닝 모델을 직접 만드는데 필요했던 수고를 덜어주는 것만은 분명한 것 같다. teachablemachine는 더 빠르고 다양하게 프로토타입을 제작해본다거나 빨리 출시해 테스트해보는 린한 프로젝트들에 확실히 유용할 것으로 보인다.&lt;/p&gt;</content><author><name></name></author><summary type="html">Teachable Machine Train a computer to recognize your own images, sounds, &amp;amp; poses. A fast, easy way to create machine learning models for your sites, apps, and more – no expertise or coding required.</summary></entry></feed>